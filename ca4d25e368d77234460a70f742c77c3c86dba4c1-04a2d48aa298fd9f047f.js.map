{"version":3,"file":"ca4d25e368d77234460a70f742c77c3c86dba4c1-04a2d48aa298fd9f047f.js","mappings":"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","sources":["webpack://rewrite/./node_modules/date-fns/esm/formatDuration/index.js","webpack://rewrite/./node_modules/date-fns/esm/fromUnixTime/index.js","webpack://rewrite/./node_modules/date-fns/esm/compareAsc/index.js","webpack://rewrite/./node_modules/date-fns/esm/addDays/index.js","webpack://rewrite/./node_modules/date-fns/esm/addMonths/index.js","webpack://rewrite/./node_modules/date-fns/esm/add/index.js","webpack://rewrite/./node_modules/date-fns/esm/startOfDay/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInDays/index.js","webpack://rewrite/./node_modules/date-fns/esm/constants/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://rewrite/./node_modules/date-fns/esm/_lib/roundingMethods/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInHours/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInMinutes/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://rewrite/./node_modules/date-fns/esm/endOfDay/index.js","webpack://rewrite/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://rewrite/./node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInMonths/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInCalendarYears/index.js","webpack://rewrite/./node_modules/date-fns/esm/differenceInYears/index.js","webpack://rewrite/./node_modules/date-fns/esm/intervalToDuration/index.js","webpack://rewrite/./node_modules/date-fns/esm/isPast/index.js","webpack://rewrite/./src/app/useTourney.js"],"sourcesContent":["import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration, options) {\n  var _ref, _options$locale, _options$format, _options$zero, _options$delimiter;\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var format = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : defaultFormat;\n  var zero = (_options$zero = options === null || options === void 0 ? void 0 : options.zero) !== null && _options$zero !== void 0 ? _options$zero : false;\n  var delimiter = (_options$delimiter = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _options$delimiter !== void 0 ? _options$delimiter : ' ';\n\n  if (!locale.formatDistance) {\n    return '';\n  }\n\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var value = duration[unit];\n\n    if (typeof value === 'number' && (zero || duration[unit])) {\n      return acc.concat(locale.formatDistance(token, value));\n    }\n\n    return acc;\n  }, []).join(delimiter);\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * const result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import { fromUnixTime, isPast } from \"date-fns\"\nimport {\n  collection,\n  getDocs,\n  limit,\n  orderBy,\n  query,\n  where,\n  Timestamp,\n} from \"firebase/firestore\"\nimport { db } from \"app\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nconst useTourney = type =>\n  useQuery([\"tourney\", ...(type ? [type] : [])], async () => {\n    const q = query(\n      collection(db, \"tournaments\"),\n      orderBy(\"date\", \"desc\"),\n      ...(type ? [where(\"type\", \"==\", type)] : []),\n      limit(1)\n    )\n    const result = await getDocs(q)\n    result.data = result.docs[0].data()\n    result.data.id = result.docs[0].id\n    result.data.timestamp = new Timestamp(\n      result.data.date.seconds,\n      result.data.date.nanoseconds\n    )\n    result.data.creationDate = result.data.timestamp.toDate()\n    result.data.startDate = fromUnixTime(result.data.smashgg.startAt)\n    result.data.closeDate = fromUnixTime(\n      result.data.smashgg.registrationClosesAt\n    )\n    result.data.endDate = fromUnixTime(result.data.smashgg.endAt)\n    result.data.hasEnded = () => isPast(result.data.endDate)\n    result.data.hasClosed = () => isPast(result.data.closeDate)\n    result.data.whitelist =\n      result.data?.whitelist?.length > 0 ? result.data.whitelist : null\n    result.data.isInvited = id =>\n      result.data.whitelist ? result.data.whitelist.includes(id) : true\n    return result?.data\n  })\n\nexport default useTourney\n"],"names":["defaultFormat","formatDuration","duration","options","_ref","_options$locale","_options$format","_options$zero","_options$delimiter","arguments","length","TypeError","concat","defaultOptions","locale","format","zero","delimiter","formatDistance","result","reduce","acc","unit","token","replace","m","toUpperCase","value","join","fromUnixTime","dirtyUnixTime","unixTime","compareAsc","dirtyDateLeft","dirtyDateRight","requiredArgs","dateLeft","toDate","dateRight","diff","getTime","addDays","dirtyDate","dirtyAmount","date","amount","toInteger","isNaN","Date","NaN","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","_typeof","obj","Symbol","iterator","constructor","prototype","add","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","startOfDay","setHours","MILLISECONDS_IN_DAY","differenceInCalendarDays","startOfDayLeft","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","compareLocalAsc","getHours","getMinutes","getSeconds","getMilliseconds","differenceInDays","sign","difference","abs","isLastDayNotFull","Number","pow","millisecondsInHour","differenceInMilliseconds","roundingMap","ceil","floor","trunc","getRoundingMethod","method","differenceInHours","roundingMethod","differenceInMinutes","differenceInCalendarMonths","yearDiff","monthDiff","endOfDay","endOfMonth","month","isLastDayOfMonth","differenceInMonths","isLastMonthNotFull","differenceInSeconds","differenceInCalendarYears","differenceInYears","isLastYearNotFull","intervalToDuration","interval","start","end","RangeError","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","isPast","now","type","useQuery","async","q","query","collection","db","orderBy","where","limit","getDocs","data","docs","id","timestamp","Timestamp","nanoseconds","creationDate","startDate","smashgg","startAt","closeDate","registrationClosesAt","endDate","endAt","hasEnded","hasClosed","whitelist","isInvited","includes"],"sourceRoot":""}